trigger:
  - main

pool:
  vmImage: 'windows-latest'

parameters:
  - name: operation
    type: string
    default: 'Backup'
    values:
      - Backup
      - Restore
  - name: environmentName
    type: string
    default: 'Development'
    values:
      - Development
      - Staging
      - Production
  - name: backupType
    type: string
    default: 'Full'
    values:
      - Full
      - Differential
      - Log
  
variables:
  - name: SqlServerInstance
    ${{ if eq(parameters.environmentName, 'Development') }}:
      value: 'dev-sql-server.database.windows.net'
    ${{ if eq(parameters.environmentName, 'Staging') }}:
      value: 'stage-sql-server.database.windows.net'
    ${{ if eq(parameters.environmentName, 'Production') }}:
      value: 'prod-sql-server.database.windows.net'

steps:
- ${{ if eq(parameters.operation, 'Restore') }}:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'DatabaseBackup'
      targetPath: '$(Build.ArtifactStagingDirectory)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Convert plain text password to SecureString
      $securePassword = ConvertTo-SecureString "$(SqlPassword)" -AsPlainText -Force
      
      # Set common parameters
      $params = @{
        Operation = "${{ parameters.operation }}"
        DatabaseName = "$(DatabaseName)"
        ServerInstance = "$(SqlServerInstance)"
        SqlUsername = "$(SqlUsername)"
        SqlPassword = $securePassword
        CommandTimeout = 7200
      }

      # Add operation-specific parameters
      if ("${{ parameters.operation }}" -eq "Backup") {
        $params.BackupType = "${{ parameters.backupType }}"
        $params.DataFilePath = "$(Build.ArtifactStagingDirectory)"
        $params.Description = "Pipeline backup from ${{ parameters.environmentName }} environment"
      }
      else {
        $params.BackupFile = "$(Build.ArtifactStagingDirectory)/database.bak"
        $params.DataFilePath = "$(Build.ArtifactStagingDirectory)/Data"
        $params.LogFilePath = "$(Build.ArtifactStagingDirectory)/Log"
        $params.OverwriteExisting = $true
      }
      
      # Execute the script with parameters
      & "$(System.DefaultWorkingDirectory)/RestoreDatabaseViaPipeline.ps1" @params
      
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Database operation failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
      }
  env:
    SqlPassword: $(SqlPassword) # Secure way to pass password
  displayName: '${{ parameters.operation }} Database'
  condition: succeeded()

- ${{ if eq(parameters.operation, 'Backup') }}:
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'DatabaseBackup'
      publishLocation: 'pipeline' 