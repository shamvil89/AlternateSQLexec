trigger:
  - main

parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'Development'
    values:
      - Development
      - Staging
      - Production

variables:
  - name: sourceInstance
    ${{ if eq(parameters.environment, 'Development') }}:
      value: 'DEV-SQL-SERVER'
    ${{ if eq(parameters.environment, 'Staging') }}:
      value: 'STG-SQL-SERVER'
    ${{ if eq(parameters.environment, 'Production') }}:
      value: 'PROD-SQL-SERVER'
  
  - name: targetInstance
    ${{ if eq(parameters.environment, 'Development') }}:
      value: 'DEV-SQL-SERVER'
    ${{ if eq(parameters.environment, 'Staging') }}:
      value: 'STG-SQL-SERVER'
    ${{ if eq(parameters.environment, 'Production') }}:
      value: 'PROD-SQL-SERVER'

pool:
  vmImage: 'windows-latest'

stages:
- stage: ValidateInput
  jobs:
  - job: Validation
    steps:
    - task: PowerShell@2
      name: ValidateParameters
      inputs:
        targetType: 'inline'
        script: |
          # Add validation logic here
          if ("$(SourceDatabaseName)" -eq "" -or "$(TargetDatabaseName)" -eq "") {
            Write-Error "Database names cannot be empty"
            exit 1
          }

- stage: DatabaseRefresh
  dependsOn: ValidateInput
  condition: succeeded('ValidateInput')
  jobs:
  - deployment: RefreshDatabase
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: PowerShell@2
            name: InstallSqlModule
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name SqlServer -Force -AllowClobber -Scope CurrentUser

          - task: PowerShell@2
            name: BackupAndRestore
            inputs:
              filePath: '$(System.DefaultWorkingDirectory)/DatabaseRefresh.ps1'
              arguments: >
                -SourceInstanceName "$(sourceInstance)"
                -SourceDatabaseName "$(SourceDatabaseName)"
                -TargetInstanceName "$(targetInstance)"
                -TargetDatabaseName "$(TargetDatabaseName)"
                -BackupType CopyOnly
                $(UseWindowsAuth)
              errorActionPreference: 'Stop'
            env:
              SQL_USERNAME: $(SqlUsername)
              SQL_PASSWORD: $(SqlPassword)

- stage: Verification
  dependsOn: DatabaseRefresh
  condition: succeeded('DatabaseRefresh')
  jobs:
  - job: VerifyRefresh
    steps:
    - task: PowerShell@2
      name: VerifyDatabase
      inputs:
        targetType: 'inline'
        script: |
          $query = "SELECT name, state_desc FROM sys.databases WHERE name = '$(TargetDatabaseName)'"
          $result = Invoke-Sqlcmd -ServerInstance "$(targetInstance)" -Database "master" -Query $query
          if ($result.state_desc -ne "ONLINE") {
            Write-Error "Database is not in ONLINE state"
            exit 1
          }
          Write-Host "Database refresh verified successfully" 