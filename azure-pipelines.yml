trigger:
  - main

pool:
  vmImage: 'windows-latest'

parameters:
  - name: environmentName
    type: string
    default: 'Development'
    values:
      - Development
      - Staging
      - Production
  
variables:
  - name: SqlServerInstance
    ${{ if eq(parameters.environmentName, 'Development') }}:
      value: 'dev-sql-server.database.windows.net'
    ${{ if eq(parameters.environmentName, 'Staging') }}:
      value: 'stage-sql-server.database.windows.net'
    ${{ if eq(parameters.environmentName, 'Production') }}:
      value: 'prod-sql-server.database.windows.net'

steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: 'DatabaseBackup'
    targetPath: '$(Build.ArtifactStagingDirectory)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Convert plain text password to SecureString
      $securePassword = ConvertTo-SecureString "$(SqlPassword)" -AsPlainText -Force
      
      # Execute restore script with secure password
      & "$(System.DefaultWorkingDirectory)/RestoreDatabaseViaPipeline.ps1" `
        -BackupFile "$(Build.ArtifactStagingDirectory)/database.bak" `
        -NewDatabaseName "$(DatabaseName)" `
        -ServerInstance "$(SqlServerInstance)" `
        -SqlUsername "$(SqlUsername)" `
        -SqlPassword $securePassword `
        -DataFilePath "$(Build.ArtifactStagingDirectory)/Data" `
        -LogFilePath "$(Build.ArtifactStagingDirectory)/Log" `
        -OverwriteExisting `
        -CommandTimeout 7200
      
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Database restore failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
      }
  env:
    SqlPassword: $(SqlPassword) # Secure way to pass password
  displayName: 'Restore Database'
  condition: succeeded() 